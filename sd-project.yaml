apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: metrics-server
      volumes:
      # mount in tmp so we can safely use from-scratch images and/or read-only containers
      - name: tmp-dir
        emptyDir: { }
      priorityClassName: system-cluster-critical
      containers:
      - name: metrics-server
        image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
        imagePullPolicy: IfNotPresent
        args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
        command:
          - /metrics-server
          - --kubelete-insecure-tls
          - --kubelet-preferred-address-types=InternalIP
        resources:
          requests:
            cpu:    200m
            memory: 300Mi
        ports:
        - name: https
          containerPort: 4443
          protocol:      TCP
        readinessProbe:
          httpGet:
            path:   /readyz
            port:   https
            scheme: HTTPS
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
        livenessProbe:
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          failureThreshold: 3
          periodSeconds: 10
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: tmp-dir
          mountPath: /tmp
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service 
metadata:
  name: sd-service
spec:
  selector:
    app: filmesnode
  ports:
    - port: 3030

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sd-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: filmesnode
  template:
    metadata:
      labels:
        app: filmesnode
    spec:
      containers:
        - name: db-filmes
          image: florsousa/db_sd
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
            - containerPort: 5432
        - name: filmes-node
          image: florsousa/servidor_node
          resources:
            requests:
              cpu: "10m"
            limits: 
              memory: "128Mi"
              cpu: "500m"
        
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sd-autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sd-deployment
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 2
  - type: Resource
    resource:
      name: memory
      target:
        type: AverageValue
        averageValue: 150Mi